
import Regalo.*

describe "Una pista de Scalextric" {

	test "Costo Sin Autos Extra" {
		assert.equals(27300, scalextric.precio())
	}

	test "Costo Con 3 Autos Extra" {
		scalextric.componentes().add(auto)
		scalextric.componentes().add(auto)
		scalextric.componentes().add(auto)
		assert.equals(43050, scalextric.precioComponentes() + scalextric.precio())
	}
	
	test "Sin Autos Extra No Es Valioso" {
		assert.notThat(scalextric.esValioso())
	}	

	test "Con 1 Auto Extra Es Valioso" {
		scalextric.componentes().add(auto)
		assert.that(scalextric.esValioso())
	}	
}

describe "Un yo-yo Russell" {
	test "Costo De Color Amarillo" {
		yoYoRussell.color("Amarillo")
		assert.equals(5000, yoYoRussell.precio())
	}
	
	test "Costo De Color Azul" {
		assert.equals(6500, yoYoRussell.precio())
	}
	
	test "De Color Rojo No Es Valioso" {
		yoYoRussell.color("Rojo")
		assert.notThat(yoYoRussell.esValioso())
	}
	test "De Color Azul Es Valioso" {
		assert.that(yoYoRussell.esValioso())
	}
}

describe "Un Balero" {
	test "Costo Sin Adorno Metalico" {
		balero.quitarAdorno()
		assert.equals(14100,balero.precio())
	}
	test "Costo Con Adorno Metalico" {
		balero.agregarAdorno()
		assert.equals(16000,balero.precio())
	}
	test "Sin Adornos No Es Valioso" {
		balero.quitarAdorno()
		assert.notThat(balero.esValioso())
	}
	test "Con Adornos Es Valioso" {
		balero.agregarAdorno()
		assert.that(balero.esValioso())
	}
	
	
}


	